// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
mod imp {
    use libbpf_rs::libbpf_sys;

    fn build_skel_config() -> libbpf_rs::Result<libbpf_rs::skeleton::ObjectSkeletonConfig<'static>>
    {
        let mut builder = libbpf_rs::skeleton::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("bpftune_bpf")
            .map("events", false)
            .map("bpftune_.bss", true)
            .prog("profile");

        builder.build()
    }

    #[derive(Default)]
    pub struct BpftuneSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> BpftuneSkelBuilder {
        pub fn open(mut self) -> libbpf_rs::Result<OpenBpftuneSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenBpftuneSkel { obj, skel_config })
        }

        pub fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenBpftuneSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenBpftuneSkel { obj, skel_config })
        }
    }

    pub struct OpenBpftuneMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl<'a> OpenBpftuneMaps<'a> {
        pub fn events(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("events").unwrap()
        }

        pub fn bss(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("bpftune_.bss").unwrap()
        }
    }

    pub struct OpenBpftuneMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl<'a> OpenBpftuneMapsMut<'a> {
        pub fn events(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("events").unwrap()
        }

        pub fn bss(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("bpftune_.bss").unwrap()
        }
    }

    pub struct OpenBpftuneProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl<'a> OpenBpftuneProgs<'a> {
        pub fn profile(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("profile").unwrap()
        }
    }

    pub struct OpenBpftuneProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl<'a> OpenBpftuneProgsMut<'a> {
        pub fn profile(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("profile").unwrap()
        }
    }

    pub mod bpftune_bss_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct bss {
            pub _event: stacktrace_event,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct stacktrace_event {
            pub pid: u32,
            pub cpu_id: u32,
            pub comm: [i8; 16],
            pub kstack_sz: i32,
            pub ustack_sz: i32,
            pub kstack: [u64; 128],
            pub ustack: [u64; 128],
        }
        impl Default for stacktrace_event {
            fn default() -> Self {
                stacktrace_event {
                    pid: u32::default(),
                    cpu_id: u32::default(),
                    comm: [i8::default(); 16],
                    kstack_sz: i32::default(),
                    ustack_sz: i32::default(),
                    kstack: [u64::default(); 128],
                    ustack: [u64::default(); 128],
                }
            }
        }
    }

    pub struct OpenBpftuneSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::skeleton::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenBpftuneSkel<'a> {
        pub fn load(mut self) -> libbpf_rs::Result<BpftuneSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(BpftuneSkel {
                obj,
                skel_config: self.skel_config,
                links: BpftuneLinks::default(),
            })
        }

        pub fn progs(&self) -> OpenBpftuneProgs {
            OpenBpftuneProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenBpftuneProgsMut {
            OpenBpftuneProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenBpftuneMaps {
            OpenBpftuneMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenBpftuneMapsMut {
            OpenBpftuneMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn bss(&mut self) -> &'a mut bpftune_bss_types::bss {
            unsafe {
                std::mem::transmute::<*mut std::ffi::c_void, &'a mut bpftune_bss_types::bss>(
                    self.skel_config.map_mmap_ptr(1).unwrap(),
                )
            }
        }
    }

    pub struct BpftuneMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl<'a> BpftuneMaps<'a> {
        pub fn events(&self) -> &libbpf_rs::Map {
            self.inner.map("events").unwrap()
        }

        pub fn bss(&self) -> &libbpf_rs::Map {
            self.inner.map("bpftune_.bss").unwrap()
        }
    }

    pub struct BpftuneMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl<'a> BpftuneMapsMut<'a> {
        pub fn events(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("events").unwrap()
        }

        pub fn bss(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("bpftune_.bss").unwrap()
        }
    }

    pub struct BpftuneProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl<'a> BpftuneProgs<'a> {
        pub fn profile(&self) -> &libbpf_rs::Program {
            self.inner.prog("profile").unwrap()
        }
    }

    pub struct BpftuneProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl<'a> BpftuneProgsMut<'a> {
        pub fn profile(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("profile").unwrap()
        }
    }

    #[derive(Default)]
    pub struct BpftuneLinks {
        pub profile: Option<libbpf_rs::Link>,
    }

    pub struct BpftuneSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::skeleton::ObjectSkeletonConfig<'a>,
        pub links: BpftuneLinks,
    }

    unsafe impl<'a> Send for BpftuneSkel<'a> {}
    unsafe impl<'a> Sync for BpftuneSkel<'a> {}

    impl<'a> BpftuneSkel<'a> {
        pub fn progs(&self) -> BpftuneProgs {
            BpftuneProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> BpftuneProgsMut {
            BpftuneProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> BpftuneMaps {
            BpftuneMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> BpftuneMapsMut {
            BpftuneMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn bss(&mut self) -> &'a mut bpftune_bss_types::bss {
            unsafe {
                std::mem::transmute::<*mut std::ffi::c_void, &'a mut bpftune_bss_types::bss>(
                    self.skel_config.map_mmap_ptr(1).unwrap(),
                )
            }
        }

        pub fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = BpftuneLinks {
                profile: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 10, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 46, 98, 115, 115, 0, 46, 109,
        97, 112, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0, 98, 112, 102, 116, 117, 110, 101, 46,
        98, 112, 102, 46, 99, 0, 76, 66, 66, 48, 95, 52, 0, 76, 66, 66, 48, 95, 51, 0, 112, 114,
        111, 102, 105, 108, 101, 0, 101, 118, 101, 110, 116, 115, 0, 95, 101, 118, 101, 110, 116,
        0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108, 112, 101, 114, 102, 95, 101, 118, 101,
        110, 116, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 4, 0, 241, 255, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 3, 0, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 68, 0, 0, 0, 0, 0, 3, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
        0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 17, 0, 5, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 32, 8, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        0, 0, 0, 0, 0, 0, 123, 26, 248, 255, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0, 0, 191, 9, 0, 0,
        0, 0, 0, 0, 133, 0, 0, 0, 8, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 32, 8, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
        131, 0, 0, 0, 191, 7, 0, 0, 0, 0, 0, 0, 183, 8, 0, 0, 1, 0, 0, 0, 21, 7, 30, 0, 0, 0, 0, 0,
        99, 103, 4, 0, 0, 0, 0, 0, 119, 9, 0, 0, 32, 0, 0, 0, 99, 151, 0, 0, 0, 0, 0, 0, 191, 118,
        0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 8, 0, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 16, 0,
        0, 0, 133, 0, 0, 0, 16, 0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 115,
        22, 0, 0, 0, 0, 0, 0, 191, 114, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 32, 0, 0, 0, 183, 8, 0, 0, 0,
        0, 0, 0, 121, 166, 248, 255, 0, 0, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 4, 0,
        0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 67, 0, 0, 0, 99, 7, 24, 0, 0, 0, 0, 0, 191, 114,
        0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 32, 4, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 4,
        0, 0, 183, 4, 0, 0, 0, 1, 0, 0, 133, 0, 0, 0, 67, 0, 0, 0, 99, 7, 28, 0, 0, 0, 0, 0, 191,
        113, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0, 0, 191, 128, 0,
        0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 6, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 56, 2, 0, 0, 56, 2, 0, 0, 27,
        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 0,
        0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 25,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 42, 0, 0, 0, 0, 0,
        0, 14, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13,
        2, 0, 0, 0, 49, 0, 0, 0, 9, 0, 0, 0, 53, 0, 0, 0, 1, 0, 0, 12, 10, 0, 0, 0, 61, 0, 0, 0, 7,
        0, 0, 4, 32, 8, 0, 0, 78, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 13, 0, 0, 0, 32,
        0, 0, 0, 89, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 94, 0, 0, 0, 17, 0, 0, 0, 192, 0, 0, 0,
        104, 0, 0, 0, 17, 0, 0, 0, 224, 0, 0, 0, 114, 0, 0, 0, 18, 0, 0, 0, 0, 1, 0, 0, 121, 0, 0,
        0, 18, 0, 0, 0, 0, 33, 0, 0, 128, 0, 0, 0, 0, 0, 0, 8, 14, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
        1, 4, 0, 0, 0, 32, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 8, 2,
        0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 8, 21, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 8, 20, 0, 0, 0, 178,
        0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 19, 0, 0,
        0, 4, 0, 0, 0, 128, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 14, 12, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 14,
        23, 0, 0, 0, 1, 0, 0, 0, 253, 2, 0, 0, 1, 0, 0, 15, 32, 8, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0,
        32, 8, 0, 0, 2, 3, 0, 0, 1, 0, 0, 15, 16, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 8,
        3, 0, 0, 1, 0, 0, 15, 13, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 105, 110, 116,
        0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 116, 121,
        112, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 101, 118, 101, 110,
        116, 115, 0, 99, 116, 120, 0, 112, 114, 111, 102, 105, 108, 101, 0, 115, 116, 97, 99, 107,
        116, 114, 97, 99, 101, 95, 101, 118, 101, 110, 116, 0, 112, 105, 100, 0, 99, 112, 117, 95,
        105, 100, 0, 99, 111, 109, 109, 0, 107, 115, 116, 97, 99, 107, 95, 115, 122, 0, 117, 115,
        116, 97, 99, 107, 95, 115, 122, 0, 107, 115, 116, 97, 99, 107, 0, 117, 115, 116, 97, 99,
        107, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116,
        0, 99, 104, 97, 114, 0, 95, 95, 115, 51, 50, 0, 115, 116, 97, 99, 107, 95, 116, 114, 97,
        99, 101, 95, 116, 0, 95, 95, 117, 54, 52, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        108, 111, 110, 103, 32, 108, 111, 110, 103, 0, 95, 101, 118, 101, 110, 116, 0, 76, 73, 67,
        69, 78, 83, 69, 0, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 47, 46, 47, 115, 114, 99,
        47, 98, 112, 102, 47, 98, 112, 102, 116, 117, 110, 101, 46, 98, 112, 102, 46, 99, 0, 105,
        110, 116, 32, 112, 114, 111, 102, 105, 108, 101, 40, 118, 111, 105, 100, 32, 42, 99, 116,
        120, 41, 0, 9, 105, 110, 116, 32, 112, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103, 101,
        116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100, 40,
        41, 32, 62, 62, 32, 51, 50, 59, 0, 9, 105, 110, 116, 32, 99, 112, 117, 95, 105, 100, 32,
        61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 115, 109, 112, 95, 112, 114, 111, 99, 101,
        115, 115, 111, 114, 95, 105, 100, 40, 41, 59, 0, 9, 101, 118, 101, 110, 116, 32, 61, 32,
        98, 112, 102, 95, 114, 105, 110, 103, 98, 117, 102, 95, 114, 101, 115, 101, 114, 118, 101,
        40, 38, 101, 118, 101, 110, 116, 115, 44, 32, 115, 105, 122, 101, 111, 102, 40, 42, 101,
        118, 101, 110, 116, 41, 44, 32, 48, 41, 59, 0, 9, 105, 102, 32, 40, 33, 101, 118, 101, 110,
        116, 41, 0, 9, 101, 118, 101, 110, 116, 45, 62, 99, 112, 117, 95, 105, 100, 32, 61, 32, 99,
        112, 117, 95, 105, 100, 59, 0, 9, 101, 118, 101, 110, 116, 45, 62, 112, 105, 100, 32, 61,
        32, 112, 105, 100, 59, 0, 9, 105, 102, 32, 40, 98, 112, 102, 95, 103, 101, 116, 95, 99,
        117, 114, 114, 101, 110, 116, 95, 99, 111, 109, 109, 40, 101, 118, 101, 110, 116, 45, 62,
        99, 111, 109, 109, 44, 32, 115, 105, 122, 101, 111, 102, 40, 101, 118, 101, 110, 116, 45,
        62, 99, 111, 109, 109, 41, 41, 41, 0, 9, 9, 101, 118, 101, 110, 116, 45, 62, 99, 111, 109,
        109, 91, 48, 93, 32, 61, 32, 48, 59, 0, 9, 101, 118, 101, 110, 116, 45, 62, 107, 115, 116,
        97, 99, 107, 95, 115, 122, 32, 61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 115, 116, 97,
        99, 107, 40, 99, 116, 120, 44, 32, 101, 118, 101, 110, 116, 45, 62, 107, 115, 116, 97, 99,
        107, 44, 32, 115, 105, 122, 101, 111, 102, 40, 101, 118, 101, 110, 116, 45, 62, 107, 115,
        116, 97, 99, 107, 41, 44, 32, 48, 41, 59, 0, 9, 101, 118, 101, 110, 116, 45, 62, 117, 115,
        116, 97, 99, 107, 95, 115, 122, 32, 61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 115, 116,
        97, 99, 107, 40, 99, 116, 120, 44, 32, 101, 118, 101, 110, 116, 45, 62, 117, 115, 116, 97,
        99, 107, 44, 32, 115, 105, 122, 101, 111, 102, 40, 101, 118, 101, 110, 116, 45, 62, 117,
        115, 116, 97, 99, 107, 41, 44, 32, 66, 80, 70, 95, 70, 95, 85, 83, 69, 82, 95, 83, 84, 65,
        67, 75, 41, 59, 0, 9, 98, 112, 102, 95, 114, 105, 110, 103, 98, 117, 102, 95, 115, 117, 98,
        109, 105, 116, 40, 101, 118, 101, 110, 116, 44, 32, 48, 41, 59, 0, 125, 0, 46, 98, 115,
        115, 0, 46, 109, 97, 112, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0, 112, 101, 114, 102,
        95, 101, 118, 101, 110, 116, 0, 0, 0, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20,
        0, 0, 0, 20, 0, 0, 0, 76, 1, 0, 0, 96, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 3, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 16, 3, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 212, 0,
        0, 0, 247, 0, 0, 0, 0, 72, 0, 0, 8, 0, 0, 0, 212, 0, 0, 0, 14, 1, 0, 0, 12, 80, 0, 0, 24,
        0, 0, 0, 212, 0, 0, 0, 59, 1, 0, 0, 15, 84, 0, 0, 40, 0, 0, 0, 212, 0, 0, 0, 101, 1, 0, 0,
        10, 100, 0, 0, 96, 0, 0, 0, 212, 0, 0, 0, 159, 1, 0, 0, 6, 104, 0, 0, 104, 0, 0, 0, 212, 0,
        0, 0, 172, 1, 0, 0, 16, 120, 0, 0, 112, 0, 0, 0, 212, 0, 0, 0, 14, 1, 0, 0, 39, 80, 0, 0,
        120, 0, 0, 0, 212, 0, 0, 0, 197, 1, 0, 0, 13, 116, 0, 0, 128, 0, 0, 0, 212, 0, 0, 0, 216,
        1, 0, 0, 34, 128, 0, 0, 144, 0, 0, 0, 212, 0, 0, 0, 216, 1, 0, 0, 6, 128, 0, 0, 168, 0, 0,
        0, 212, 0, 0, 0, 216, 1, 0, 0, 6, 128, 0, 0, 184, 0, 0, 0, 212, 0, 0, 0, 21, 2, 0, 0, 18,
        132, 0, 0, 192, 0, 0, 0, 212, 0, 0, 0, 43, 2, 0, 0, 47, 140, 0, 0, 224, 0, 0, 0, 212, 0, 0,
        0, 43, 2, 0, 0, 21, 140, 0, 0, 0, 1, 0, 0, 212, 0, 0, 0, 43, 2, 0, 0, 19, 140, 0, 0, 8, 1,
        0, 0, 212, 0, 0, 0, 124, 2, 0, 0, 47, 148, 0, 0, 24, 1, 0, 0, 212, 0, 0, 0, 124, 2, 0, 0,
        21, 148, 0, 0, 56, 1, 0, 0, 212, 0, 0, 0, 124, 2, 0, 0, 19, 148, 0, 0, 64, 1, 0, 0, 212, 0,
        0, 0, 220, 2, 0, 0, 2, 156, 0, 0, 88, 1, 0, 0, 212, 0, 0, 0, 251, 2, 0, 0, 1, 168, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
        0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 200, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 32, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 1,
        0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 13, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
        0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 3, 0, 0, 0, 0, 0,
        0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 3,
        0, 0, 0, 0, 0, 0, 107, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 168, 8, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
